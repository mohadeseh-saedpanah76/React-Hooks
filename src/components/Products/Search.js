import React , {useState , useEffect , useRef} from 'react'

//می خواهیم با استفاده از یوز افکت کاری کنیم دیپندنسی بر اساس سرچ باشه
//یعنی هر موفع چیزی سرچ شد ابدا یه در خواست بره به پایگاه داده
//بعد اون کلمه ی سرچ شده در پایگاه سرچ بشه
//اگه وجود داشت بدون رفرش اون محصول زیر باکس محصولات نمایش داده بشه

import Card from '../UI/Card'

import './Search.css'

const Search = React.memo((props) => {

  //چون انلودد پروداکت باید بصورت یک پراپ باشه و ما در ادامه از اون برای دیپندنسی یوز افکت هم استفاده کردیم 
  //بصورت زیر اونو بصورت پراپ تعریف میکنیم
  //به کمک ابجکت دیستراکترینگ پراپ اونو تعریف میکنیم
  const {onLoadProducts} = props
  const [searchItem , setSearchItem] = useState('')
  //روس فراخوانی یوز رف به شکل زیره
  const inputRef = useRef()


  //دیپندنسی این یوز افکت بر اساس مقدار سرچ شدس
  //یعنی فقط زمانی که چیزی سرچ شد درخواستی ارسال کنه
  useEffect(()=>{
    //وقتی در اینپوت سرچ کلمه ای تایپ میشه به ازای تایپ هر حرف یا پاککردن یه درخواست ارسال میشه که این خوب نیست 
    //برای جلوگیری از اینکار اول از ک تابع ست تایم اوت استفاده میکنیم
    //روش بعدی اینه که ببینیم قبل از ست تایم اوت چه کلمه ای در سرچ تایپ شده بوده
    //پس باید یک ارتباطی با دام برقرار بشه
    //برای برقراری ارتباط با دام از هوک یوزرف استفاده میکنیم
    //منظور از ارتباط با دام یعنی برقراری ارتباط بین فرایندی که در یوز افکت هست با اینپوت موجود در کرهای جی اس ایکس
    // برای اینکار در تگ اینپوت از اتریبیوت رف استفاده کرده و مقدار اون رو برابر با اینپوت رف میذاریم که مقدار یوز رف در ان است

    //برای استفاده از تابع کلین اپ ابتدا مقدار ست تایم اوت  رو بریز توی یک متغیر
    //مثلا متغیر تایمر
    //تایمر نقش یک پوینتر رو برای ما داره
    const timer =  setTimeout(()=>{
      //یک شرط مینویسیم قبلا از ساختن کوئری که ببینیم مقداری که در سرچ تایپ میشه با مقدار قبلی برابر هست یا نیست
    if(searchItem === inputRef.current.value){
      //مقدار اینپوت رف دات کورنت دات ولیو مقدار فعلی اینپوت رف رو به ما میده

    //برای  اینکه بدونیم در پایگاه داده در چه یو ار الی باید سرچ انجام بشه
    //باید با بک اند کار مشورت کنیم
    // کوئری زیر رو بک اند کار به ما میده
    const query = searchItem.length === 0 ? '' : 
    `?orderBy="title"&equalTo="${searchItem}"`

    //هربار که مقدار سرچ آیتم تغییر کنه این یوز افکت اجرا میشه
    fetch('https://project-react-hooks-c7a39-default-rtdb.firebaseio.com/products.json' + query)
    .then((response)=>{
      return response.json()
    })
    .then((responseData)=>{
      const loadedProduct = []

      for( const item in responseData){
        loadedProduct.push({
          id : item,
          title : responseData[item].title,
          amount : responseData[item].amount
        })
      }

      //حالا باید داده ای که فچ میشه و پیدا میشه در پروداکتس قسمتی که کامپوننت سرچ فراخوانی میشه فراخوانی بشه
      //یعنی باید بین کامپوننت سرچ و کامپوننت پروداکت ارتباطی برقرار بشه
      //این ارتباز به کمک پراپس انجام میشه
      onLoadProducts(loadedProduct)
      //محصولاتی که در ارایه ی لودد پروداکته باید لود بشه
    })
      }
    } , 500)
    // یکی از دیپندنسی ها یتونه انلودد پروداکتس باشه
    //چون ممکنه یوز افکت به این هم بستگی داشته باشه که محصولات لود شده به چه صورت لود شده اند

    //تابع کلین اپ باید قبل از تعریف دیپندنسی ها بیاد چون این تابع بازگشتی قبل از اجرای مجدد یوز افکت اجرا میشه
    return () =>{
      clearTimeout(timer)
    }
    //نبودن این تابع تغییری در اجرای کد ایجاد نمیکنه ولی باعث میشه کدما منطقی تر و بهتر باشه

  }, [searchItem , onLoadProducts, inputRef])
  return (
    <section className="search">
      <Card>
        <div className="search-input">
          <label>جست و جو</label>
          <input 
          ref={inputRef}
          type="text" 
          value={searchItem}
          onChange={(event) => setSearchItem(event.target.value)}
          />
        </div>
      </Card>
    </section>
  )
})

export default Search
